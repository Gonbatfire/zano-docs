"use strict";(self.webpackChunkzano_docs=self.webpackChunkzano_docs||[]).push([[9437],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),l=p(n),m=o,f=l["".concat(u,".").concat(m)]||l[m]||d[m]||a;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[l]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2955:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={},i=void 0,s={unversionedId:"build/rpc-api/daemon-rpc-api/getrandom_outs",id:"build/rpc-api/daemon-rpc-api/getrandom_outs",title:"getrandom_outs",description:"Retrieve random decoy outputs for specified amounts (legacy format).",source:"@site/docs/build/rpc-api/daemon-rpc-api/getrandom_outs.md",sourceDirName:"build/rpc-api/daemon-rpc-api",slug:"/build/rpc-api/daemon-rpc-api/getrandom_outs",permalink:"/docs/build/rpc-api/daemon-rpc-api/getrandom_outs",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"buildSidebar",previous:{title:"getrandom_outs.bin",permalink:"/docs/build/rpc-api/daemon-rpc-api/getrandom_outs.bin"},next:{title:"getrandom_outs1.bin",permalink:"/docs/build/rpc-api/daemon-rpc-api/getrandom_outs1.bin"}},u={},p=[{value:"Request:",id:"request",level:3},{value:"Request description:",id:"request-description",level:3},{value:"Response:",id:"response",level:3},{value:"Response description:",id:"response-description",level:3}],c={toc:p},l="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(l,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Retrieve random decoy outputs for specified amounts (legacy format)."),(0,o.kt)("p",null,"URL: ",(0,o.kt)("inlineCode",{parentName:"p"},"http:://127.0.0.1:11211/json_rpc")),(0,o.kt)("h3",{id:"request"},"Request:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": 0,\n  "jsonrpc": "2.0",\n  "method": "getrandom_outs",\n  "params": {\n    "amounts": [0,10000000000],\n    "outs_count": 2,\n    "use_forced_mix_outs": false\n  }\n}\n')),(0,o.kt)("h3",{id:"request-description"},"Request description:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    "amounts": List of amounts for which decoy outputs are requested.\n    "outs_count": Number of decoy outputs requested for each amount.\n    "use_forced_mix_outs": If true, only outputs with a \'mix_attr\' greater than 0 are used as decoys.\n\n')),(0,o.kt)("h3",{id:"response"},"Response:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": 0,\n  "jsonrpc": "2.0",\n  "result": {\n    "outs": [{\n      "amount": 10000000000\n    }],\n    "status": "OK"\n  }\n}\n')),(0,o.kt)("h3",{id:"response-description"},"Response description:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    "outs": List of \'outs_for_amount\' structures, each containing decoys for a specific amount.\n      "amount": The amount for which decoys are returned.\n    "status": Status of the call.\n\n')),(0,o.kt)("sub",null,"Auto-doc built with: 2.1.8.415[f287916]"))}d.isMDXComponent=!0}}]);