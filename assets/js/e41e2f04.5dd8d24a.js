"use strict";(self.webpackChunkzano_docs=self.webpackChunkzano_docs||[]).push([[976],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=n.createContext({}),c=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(u.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),l=c(r),m=o,f=l["".concat(u,".").concat(m)]||l[m]||d[m]||a;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[l]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5184:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const a={},i=void 0,s={unversionedId:"build/rpc-api/daemon-rpc-api/getrandom_outs.bin",id:"build/rpc-api/daemon-rpc-api/getrandom_outs.bin",title:"getrandom_outs.bin",description:"Retrieve random decoy outputs for specified amounts (legacy format).",source:"@site/docs/build/rpc-api/daemon-rpc-api/getrandom_outs.bin.md",sourceDirName:"build/rpc-api/daemon-rpc-api",slug:"/build/rpc-api/daemon-rpc-api/getrandom_outs.bin",permalink:"/zano-docs/docs/build/rpc-api/daemon-rpc-api/getrandom_outs.bin",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"buildSidebar",previous:{title:"getlastblockheader",permalink:"/zano-docs/docs/build/rpc-api/daemon-rpc-api/getlastblockheader"},next:{title:"getrandom_outs",permalink:"/zano-docs/docs/build/rpc-api/daemon-rpc-api/getrandom_outs"}},u={},c=[{value:"Request:",id:"request",level:3},{value:"Request description:",id:"request-description",level:3},{value:"Response:",id:"response",level:3},{value:"Response description:",id:"response-description",level:3}],p={toc:c},l="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(l,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Retrieve random decoy outputs for specified amounts (legacy format)."),(0,o.kt)("p",null,"URL: ",(0,o.kt)("inlineCode",{parentName:"p"},"http:://127.0.0.1:11211/getrandom_outs.bin")),(0,o.kt)("h3",{id:"request"},"Request:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "amounts": [0,10000000000],\n  "outs_count": 2,\n  "use_forced_mix_outs": false\n}\n')),(0,o.kt)("h3",{id:"request-description"},"Request description:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'  "amounts": List of amounts for which decoy outputs are requested.\n  "outs_count": Number of decoy outputs requested for each amount.\n  "use_forced_mix_outs": If true, only outputs with a \'mix_attr\' greater than 0 are used as decoys.\n\n')),(0,o.kt)("h3",{id:"response"},"Response:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "outs": [{\n    "amount": 10000000000\n  }],\n  "status": "OK"\n}\n')),(0,o.kt)("h3",{id:"response-description"},"Response description:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'  "outs": List of \'outs_for_amount\' structures, each containing decoys for a specific amount.\n    "amount": The amount for which decoys are returned.\n  "status": Status of the call.\n\n')),(0,o.kt)("sub",null,"Auto-doc built with: 2.1.8.415[f287916]"))}d.isMDXComponent=!0}}]);