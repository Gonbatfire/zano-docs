"use strict";(self.webpackChunkzano_docs=self.webpackChunkzano_docs||[]).push([[8515],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=c(n),f=a,m=d["".concat(p,".").concat(f)]||d[f]||u[f]||o;return n?r.createElement(m,s(s({ref:t},l),{},{components:n})):r.createElement(m,s({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=f;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[d]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4330:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={},s=void 0,i={unversionedId:"build/rpc-api/daemon-rpc-api/get_asset_info",id:"build/rpc-api/daemon-rpc-api/get_asset_info",title:"get_asset_info",description:"Obtain information for the given asset by its ID.",source:"@site/docs/build/rpc-api/daemon-rpc-api/get_asset_info.md",sourceDirName:"build/rpc-api/daemon-rpc-api",slug:"/build/rpc-api/daemon-rpc-api/get_asset_info",permalink:"/zano-docs/docs/build/rpc-api/daemon-rpc-api/get_asset_info",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"buildSidebar",previous:{title:"get_alt_blocks_details",permalink:"/zano-docs/docs/build/rpc-api/daemon-rpc-api/get_alt_blocks_details"},next:{title:"get_assets_list",permalink:"/zano-docs/docs/build/rpc-api/daemon-rpc-api/get_assets_list"}},p={},c=[{value:"Request:",id:"request",level:3},{value:"Request description:",id:"request-description",level:3},{value:"Response:",id:"response",level:3},{value:"Response description:",id:"response-description",level:3}],l={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Obtain information for the given asset by its ID."),(0,a.kt)("p",null,"URL: ",(0,a.kt)("inlineCode",{parentName:"p"},"http:://127.0.0.1:11211/json_rpc")),(0,a.kt)("h3",{id:"request"},"Request:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": 0,\n  "jsonrpc": "2.0",\n  "method": "get_asset_info",\n  "params": {\n    "asset_id": "cc4e69455e63f4a581257382191de6856c2156630b3fba0db4bdd73ffcfb36b6"\n  }\n}\n')),(0,a.kt)("h3",{id:"request-description"},"Request description:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'    "asset_id": ID of an asset.\n\n')),(0,a.kt)("h3",{id:"response"},"Response:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": 0,\n  "jsonrpc": "2.0",\n  "result": {\n    "asset_descriptor": {\n      "current_supply": 500000000000000000,\n      "decimal_point": 12,\n      "full_name": "Zano wrapped ABC",\n      "hidden_supply": false,\n      "meta_info": "{ \\"some_arbitrary_field_name\\": \\"some arbitrary value\\"}",\n      "owner": "f74bb56a5b4fa562e679ccaadd697463498a66de4f1760b2cd40f11c3a00a7a8",\n      "owner_eth_pub_key": "",\n      "ticker": "ZABC",\n      "total_max_supply": 1000000000000000000\n    },\n    "status": "OK"\n  }\n}\n')),(0,a.kt)("h3",{id:"response-description"},"Response description:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'    "asset_descriptor": Descriptor of the given asset.\n      "current_supply": Currently emitted supply for the given asset (ignored for REGISTER operation).\n      "decimal_point": Decimal point.\n      "full_name": Full name of the asset.\n      "hidden_supply": This field is reserved for future use and will be documented later.\n      "meta_info": Any other information associated with the asset, by default in a json format.\n      "owner": Owner\'s key, used only for EMIT and UPDATE validation, can be changed by transferring asset ownership.\n      "owner_eth_pub_key": [Optional] Owner\'s key in the case when ETH signature is used.\n      "ticker": Ticker associated with the asset.\n      "total_max_supply": Maximum possible supply for a given asset, cannot be changed after deployment.\n    "status": Status of the call.\n\n')),(0,a.kt)("sub",null,"Auto-doc built with: 2.1.8.415[f287916]"))}u.isMDXComponent=!0}}]);