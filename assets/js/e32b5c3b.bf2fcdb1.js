"use strict";(self.webpackChunkzano_docs=self.webpackChunkzano_docs||[]).push([[2804],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>b});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=i.createContext({}),u=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return i.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,b=d["".concat(s,".").concat(m)]||d[m]||p[m]||r;return n?i.createElement(b,l(l({ref:t},c),{},{components:n})):i.createElement(b,l({ref:t},c))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=m;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[d]="string"==typeof e?e:o,l[1]=a;for(var u=2;u<r;u++)l[u]=n[u];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4480:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>u});var i=n(7462),o=(n(7294),n(3905));const r={},l="Building From Sources",a={unversionedId:"build/building-from-sources",id:"build/building-from-sources",title:"Building From Sources",description:"Linux",source:"@site/docs/build/building-from-sources.md",sourceDirName:"build",slug:"/build/building-from-sources",permalink:"/docs/build/building-from-sources",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"buildSidebar",previous:{title:"Message Sign",permalink:"/docs/build/zano-companion/message-sign"},next:{title:"Deeplinks",permalink:"/docs/use/deeplinks"}},s={},u=[{value:"Linux",id:"linux",level:2},{value:"Install prerequisites",id:"install-prerequisites",level:3},{value:"Download and build Boost",id:"download-and-build-boost",level:3},{value:"Install OpenSSL",id:"install-openssl",level:3},{value:"Checkout Zano from github",id:"checkout-zano-from-github",level:3},{value:"Set environment variables",id:"set-environment-variables",level:3},{value:"Build the binaries",id:"build-the-binaries",level:3},{value:"Build GUI",id:"build-gui",level:3},{value:"Windows",id:"windows",level:2},{value:"Build GUI",id:"build-gui-1",level:3},{value:"MacOS",id:"macos",level:2},{value:"Build GUI",id:"build-gui-2",level:3}],c={toc:u},d="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"building-from-sources"},"Building From Sources"),(0,o.kt)("h2",{id:"linux"},"Linux"),(0,o.kt)("h3",{id:"install-prerequisites"},"Install prerequisites"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sudo apt-get install -y build-essential g++ python-dev autotools-dev libicu-dev libbz2-dev cmake git screen checkinstall zlib1g-dev\n")),(0,o.kt)("h3",{id:"download-and-build-boost"},"Download and build Boost"),(0,o.kt)("p",null,"(Assuming you have cloned Zano into ",(0,o.kt)("inlineCode",{parentName:"p"},"zano")," folder. If used different location for Zano, edit line 4 correspondingly)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'curl -OL https://boostorg.jfrog.io/artifactory/main/release/1.70.0/source/boost_1_70_0.tar.bz2\necho "430ae8354789de4fd19ee52f3b1f739e1fba576f0aded0897c3c2bc00fb38778  boost_1_70_0.tar.bz2" | shasum -c && tar -xjf boost_1_70_0.tar.bz2\nrm boost_1_70_0.tar.bz2 && cd boost_1_70_0\npatch -p0 < ../zano/utils/boost_1.70_gcc_8.patch || cd ..\n./bootstrap.sh --with-libraries=system,filesystem,thread,date_time,chrono,regex,serialization,atomic,program_options,locale,timer,log\n./b2\n')),(0,o.kt)("p",null,'Make sure that you see "The Boost C++ Libraries were successfully built!" message at the end.'),(0,o.kt)("h3",{id:"install-openssl"},"Install OpenSSL"),(0,o.kt)("p",null,"Please, make sure the paths correspond to your environment (","`","/home/user/')"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'curl -OL https://www.openssl.org/source/openssl-1.1.1t.tar.gz\necho "a06b067b7e3bd6a2cb52a06f087ff13346ce7360  openssl-1.1.1t.tar.gz" | shasum -c && tar xzf openssl-1.1.1t.tar.gz\ncd openssl-1.1.1t/\n./config --prefix=/home/user/openssl --openssldir=/home/user/openssl shared zlib\nmake\nmake test\nmake install\n\n')),(0,o.kt)("h3",{id:"checkout-zano-from-github"},"Checkout Zano from github"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"git clone --recursive https://github.com/hyle-team/zano.git\n")),(0,o.kt)("h3",{id:"set-environment-variables"},"Set environment variables"),(0,o.kt)("p",null,"For instance, by adding the following lines to ~/.bashrc"),(0,o.kt)("p",null,"Server version"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"export BOOST_ROOT=/home/user/boost_1_70_0\nexport OPENSSL_ROOT_DIR=/home/user/openssl\n")),(0,o.kt)("p",null,"GUI version"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"export BOOST_ROOT=/home/user/boost_1_70_0\nexport OPENSSL_ROOT_DIR=/home/user/openssl\nexport QT_PREFIX_PATH=/home/user/Qt5.11.2/5.11.2/gcc_64\n")),(0,o.kt)("h3",{id:"build-the-binaries"},"Build the binaries"),(0,o.kt)("p",null,"Mainnet:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cd zano && mkdir build && cd build\ncmake\nmake -j1 daemon simplewallet\n")),(0,o.kt)("p",null,"Testnet:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cd zano && mkdir build && cd build\ncmake -D TESTNET=TRUE ..\nmake -j1 daemon simplewallet\n")),(0,o.kt)("h3",{id:"build-gui"},"Build GUI"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cd zano\nutils/build_script_linux.sh\n")),(0,o.kt)("h2",{id:"windows"},"Windows"),(0,o.kt)("p",null,"Install required prerequisites (Boost, Qt, CMake, OpenSSL)",(0,o.kt)("br",{parentName:"p"}),"\n","Rename ",(0,o.kt)("inlineCode",{parentName:"p"},"utils/configure_local_paths.cmd.example")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"utils/configure_local_paths.cmd")," and edit paths in this file so they correspond to your environment."),(0,o.kt)("p",null,"Mainnet:\nRun one of ",(0,o.kt)("inlineCode",{parentName:"p"},"utils/configure_win64_msvsNNNN_gui.cmd")," according to your MSVC version."),(0,o.kt)("p",null,"Testnet:\nRun one of ",(0,o.kt)("inlineCode",{parentName:"p"},"utils/configure_win64_msvsNNNN_testnet.cmd")," according to your MSVC version."),(0,o.kt)("p",null,"Go to the build folder and open generated Zano.sln in MSVC and build it."),(0,o.kt)("h3",{id:"build-gui-1"},"Build GUI"),(0,o.kt)("p",null,"In order to correctly deploy Qt GUI application, you also need to do the following:"),(0,o.kt)("p",null,"Copy Zano.exe to a folder (e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"depoy"),").\nRun ",(0,o.kt)("inlineCode",{parentName:"p"},"PATH_TO_QT\\bin\\windeployqt.exe deploy\\Zano.exe"),".\nCopy folder ",(0,o.kt)("inlineCode",{parentName:"p"},"\\src\\gui\\qt-daemon\\html")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"deploy\\html"),".\nNow you can run ",(0,o.kt)("inlineCode",{parentName:"p"},"Zano.exe")),(0,o.kt)("h2",{id:"macos"},"MacOS"),(0,o.kt)("p",null,"Install required prerequisites.",(0,o.kt)("br",{parentName:"p"}),"\n","Set environment variables as stated in ",(0,o.kt)("inlineCode",{parentName:"p"},"utils/macosx_build_config.command")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"mkdir build\ncd build\ncmake -D TESTNET=TRUE ..\nmake\n")),(0,o.kt)("h3",{id:"build-gui-2"},"Build GUI"),(0,o.kt)("p",null,"Create self-signing certificate via Keychain Access:"),(0,o.kt)("p",null,"Run Keychain Access"),(0,o.kt)("p",null,"Choose Keychain Access > Certificate Assistant > Create a Certificate"),(0,o.kt)("p",null,"Use \u201cZano\u201d (without quotes) as certificate name"),(0,o.kt)("p",null,"Choose \u201cCode Signing\u201d in \u201cCertificate Type\u201d field"),(0,o.kt)("p",null,"Press \u201cCreate\u201d, then \u201cDone\u201d"),(0,o.kt)("p",null,'Make sure the certificate was added to keychain "System". If not\u2014move it to "System"'),(0,o.kt)("p",null,'Double click the certificate you\'ve just added, enter the trust section and under "When using this certificate" select "Always trust"'),(0,o.kt)("p",null,'Unfold the certificate in Keychain Access window and double click the underlying private key "Zano". Select "Access Control" tab, then select "Allow all applications to access this item". Click "Save Changes"'),(0,o.kt)("p",null,"Revise building script, comment out unwanted steps and run it: utils/build_script_mac_osx.sh"),(0,o.kt)("p",null,"The application should be here: /buid_mac_osx_64/release/src"))}p.isMDXComponent=!0}}]);