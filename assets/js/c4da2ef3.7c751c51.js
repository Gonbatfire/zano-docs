"use strict";(self.webpackChunkzano_docs=self.webpackChunkzano_docs||[]).push([[9754],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>b});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,b=d["".concat(s,".").concat(m)]||d[m]||u[m]||l;return n?r.createElement(b,i(i({ref:t},c),{},{components:n})):r.createElement(b,i({ref:t},c))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:a,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8629:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const l={sidebar_position:5},i="Wallet RPC Mode",o={unversionedId:"build/rpc-api/wallet-rpc",id:"build/rpc-api/wallet-rpc",title:"Wallet RPC Mode",description:"Zano command-line wallet application (simplewallet) can be run in RPC server mode. In this mode it can be controlled by RPC calls via HTTP. This makes possible to use it as a back end for an arbitrary service.",source:"@site/docs/build/rpc-api/wallet-rpc.md",sourceDirName:"build/rpc-api",slug:"/build/rpc-api/wallet-rpc",permalink:"/docs/build/rpc-api/wallet-rpc",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"buildSidebar",previous:{title:"validate_signature",permalink:"/docs/build/rpc-api/daemon-rpc-api/validate_signature"},next:{title:"assets_whitelist_add",permalink:"/docs/build/rpc-api/wallet-rpc-api/assets_whitelist_add"}},s={},p=[],c={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"wallet-rpc-mode"},"Wallet RPC Mode"),(0,a.kt)("p",null,"Zano command-line wallet application (simplewallet) can be run in RPC server mode. In this mode it can be controlled by RPC calls via HTTP. This makes possible to use it as a back end for an arbitrary service."),(0,a.kt)("p",null,"In order to start the wallet in RPC server mode, a user needs the following:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Run zanod (the daemon application).")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Run simplewallet with the following options:"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"shell",shell:!0},"simplewallet --wallet-file PATH_TO_WALLET_FILE --password PASSWORD --rpc-bind-ip RPC_IP --rpc-bind-port RPC_PORT --daemon-address DEAMON_ADDR:DAEMON_PORT\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"where:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"PATH_TO_WALLET_FILE \u2014 path to an existing wallet file (should be created beforehand using --generate-new-wallet);"),(0,a.kt)("li",{parentName:"ul"},"PASSWORD \u2014 wallet\u2019s password;"),(0,a.kt)("li",{parentName:"ul"},"RPC_IP \u2014 IP address to bind RPC server to (127.0.0.1 will be used if not specified);"),(0,a.kt)("li",{parentName:"ul"},"RPC_PORT \u2014 TCP port for RPC server;"),(0,a.kt)("li",{parentName:"ul"},"DEAMON_ADDR:DAEMON_PORT \u2014 daemon address and port (may be omitted if the daemon is running on the same machine with the default settings);")),(0,a.kt)("p",null,"All examples below are given in assumption that the wallet application is running in RPC server mode and listening at 127.0.0.1:12233."),(0,a.kt)("p",null,"All amounts and balances are represented as unsigned integers and measured in atomic units \u2014 the smallest fraction of a coin.",(0,a.kt)("br",{parentName:"p"}),"\n","1 coin is equal to 10^12 atomic units."))}u.isMDXComponent=!0}}]);